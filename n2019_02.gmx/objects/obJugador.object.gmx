<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spAldo0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Info
/**************************************************************
Aldo es el protagonista del juego.
Acaba de llegar al pueblo y las Posadas están a punto de comenzar.

Este objeto es controlado por el jugador.
Se mueve en 8 direcciones usando 4 botones o se desplaza al
punto indicado con un clic en la ventana de juego.

Utiliza la ruta ptJugador para guardar el resultado de path-finding.

Caminar con botones y haciendo clic con ratón
[x] Primero centrar sprite

[] Probar método sin alineación
La posición final del personaje no siempre es alineada
a la rejilla.

Utiliza constantes de estados definidas en 
Macros --&gt; All configurations
**************************************************************/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializar Variables

//x += 32; //desplazar para alinear a la rejilla
//y += 32;
x = global.xSig; //posicionarse en el punto indicado
y = global.ySig; //al salir de la room anterior
vx = 0; //velocidad horizontal
vy = 0; //velocidad vertical
v = 8; //velocidad de desplazamiento
direction = global.dirSig; //inicia mirando hacia abajo
dirPrev = direction; //direction previa

// Las siguientes variables se utilizan cuando el personaje
// cambia la dirección a la que está mirando, es decir, se acaba de 
// presionar un botón de movimiento diferente al último presionado.
// En ese momento la dirección cambia y se pone el sprite adecuado.
// El personaje no puede caminar hasta que el temporizador llegue a cero.
tReposo = 0; //temporizador de reposo
T_REPOSO = 1; //periodo de reposo en steps

/// Iniciar sistema de búsqueda de ruta

grid = mp_grid_create(-64, -64, (room_width/64)+2, (room_height/64)+2, 64, 64);
// 1280/64 = 20
// 720/64 = 11.25

// también se usa la ruta ptJugador

// para saber si el objeto sigue a una ruta
// se usa la variable path_index (&gt; -1)

//agregar objetos a la rejilla
mp_grid_add_instances(grid, obBloque, false);

// Caja de colisión personalizada
boxL = 32;
boxR = 32;
boxU = 32;
boxD = 32;

// pos previa
xPrev = x;
yPrev = y;

// interacción con personajes
npc = noone;

// máquina de estados
estado = ESTADO_NORMAL;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimiento 2

// Teclado
der = keyboard_check(vk_right) or keyboard_check(ord('D'));
izq = keyboard_check(vk_left) or keyboard_check(ord('A'));
arr = keyboard_check(vk_up) or keyboard_check(ord('W'));
aba = keyboard_check(vk_down) or keyboard_check(ord('S'));

// ejes de un joystick imaginario
ejeX = der - izq;
ejeY = aba - arr;
vx = 0;
vy = 0;

if (ejeX &lt;&gt; 0 or ejeY &lt;&gt; 0) //si el joystick está desplazado
{
    //Si el personaje sigue una path/ruta,
    //dejar de seguirla y destruir el objeto que indica el punto meta
   if (path_index &gt; -1) {
      path_end();
      instance_destroy(obMarca);
   }

   //Asigna la dirección (se usará para cambiar el sprite)
   direction = point_direction(0, 0, ejeX, ejeY);
   if (direction &lt;&gt; dirPrev) {//si direction ha cambiado
      tReposo = T_REPOSO; //iniciar temporizador
      dirPrev = direction; //actualizar direction previa
   }
   
   //Comienza a moverse cuando termina el tiempo de reposo
   if (tReposo &lt;= 0) {
      vx = lengthdir_x(v, direction);
      vy = lengthdir_y(v, direction);
   }
}

// Mouse
if mouse_check_button_pressed(mb_left) {//si se hace clic
    //obtener posicion del objeto marca
    marcaX = (mouse_x div 64)*64 + 32;
    marcaY = (mouse_y div 64)*64 + 32;
    metaX = marcaX;
    metaY = marcaY;
    
    //revisar si se hizo clic sobre una salida o una puerta
    salida = instance_position(mouse_x, mouse_y, obSalida);
    //puerta = instance_position(mouse_x, mouse_y, obSalida);
    show_debug_message(salida);
    //show_debug_message(puerta);
    
    //si clic sobre una salida y no sobre una puerta
    //el punto meta queda fuera de la room
    if (salida &lt;&gt; noone)
    if (salida.object_index == obSalida) {
        metaX += lengthdir_x(64, salida.image_angle);
        metaY += lengthdir_y(64, salida.image_angle);
        show_debug_message("SALIDA");
    }
   
    //si se encuentra una ruta, seguirla
    if mp_grid_path(grid, ptJugador, x, y, metaX, metaY, true) {
        path_start(ptJugador, v, path_action_stop, true);
        if instance_exists(obMarca) instance_destroy(obMarca);
        instance_create(marcaX, marcaY, obMarca);
      
        //si se hace clic sobre un objeto salida,
        //cambiar sprite de obMarca
        if (salida &lt;&gt; noone) {
            obMarca.sprite_index = spMarcaSalida;
            obMarca.image_angle = salida.image_angle;
        }
    }
}

//Decrementar valor del timer tReposo
if (tReposo &gt; 0) tReposo--;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisiones

// Horizontal
xPrev = x; //guardar pos. previa
x += vx; //desplazar horizontalmente

// revisar colisiones con bloques solidos
bloque = instance_place(x, y, obBloque);
if (bloque &lt;&gt; noone) {
   if (bloque.x &lt; x) { //bloque a la izquierda
      x = bloque.x + bloque.sprite_width + boxL;
   }
   else {//bloque a la derecha
      x = bloque.x - boxR;
   }
   vx = 0;
}

//no salir por la izquierda de la room
//if (x &lt; boxL) {x = boxL;  vx = 0;}
//no salir por la derecha de la room
//if (x+boxR &gt; room_width) {x = room_width-boxR;  vx = 0;}

// Vertical
yPrev = y; //guardar posicion previa
y += vy; //desplazar verticalmente

// Revisar colisiones con bloques solidos
bloque = instance_place(x, y, obBloque);
if (bloque &lt;&gt; noone) {
   if (bloque.y &lt; y) {//bloque arriba
      y = bloque.y + bloque.sprite_height + boxU;
   }
   else {//bloque abajo
      y = bloque.y - boxD;
   }   
   vy = 0;
}

//no salir por arriba de la room
//if (y &lt; boxU) {y = boxU;  vy = 0;}
//no salir por abajo de la room
//if (y+boxD &gt; room_height) {y = room_height-boxD;  vy = 0;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Salir de room

// detectar colision con puerta
puerta = instance_position(x, y, obPuerta);
//puerta = instance_place(x, y, obPuerta);

// izquierda       derecha        arriba     abajo
if (x &lt; 0) or (x &gt; room_width) or (y &lt; 0) or (y &gt; room_height) or (puerta &lt;&gt; noone) {
   //obtener id de instancia de objeto salida
   //tal vez ya se tiene el id si se hizo clic en la salida,
   //pero es necesario obtenerlo si el jugador avanza usando el teclado
   salida = instance_place(x, y, obSalida);
   global.roomSig = salida.roomSig;
   global.xSig = x + salida.deltaX;
   global.ySig = y + salida.deltaY;
   global.dirSig = salida.image_angle;
   
   room_goto(global.roomSig);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacción con personajes

npc = instance_position(x+33, y, obNPC);
if (npc == noone) npc = instance_position(x-33, y, obNPC);
if (npc == noone) npc = instance_position(x, y+33, obNPC);
if (npc == noone) npc = instance_position(x, y-33, obNPC);

if (npc &lt;&gt; noone) //{// si hay un NPC cerca
{
   if (keyboard_check_pressed(ord('J')) //si se presiona la tecla J o X
   or keyboard_check_pressed(ord('X')))
   or (mouse_check_button_pressed(mb_left) //o se hace clic sobre el NPC
   and npc == instance_position(mouse_x, mouse_y, obNPC))
   {
      show_debug_message("DIALOGO"); // inicia diálogo
   }  
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimiento 1

// Teclado
der = keyboard_check(vk_right) or keyboard_check(ord('D'));
izq = keyboard_check(vk_left) or keyboard_check(ord('A'));
arr = keyboard_check(vk_up) or keyboard_check(ord('W'));
aba = keyboard_check(vk_down) or keyboard_check(ord('S'));

// ejes de un joystick imaginario
ejeX = der - izq;
ejeY = aba - arr;
vx = 0;
vy = 0;

if (ejeX &lt;&gt; 0 or ejeY &lt;&gt; 0) //si el joystick está desplazado
{
    //Si el personaje sigue una path/ruta,
    //dejar de seguirla y destruir el objeto que indica el punto meta
   if (path_index &gt; -1) {
      path_end();
      instance_destroy(obMarca);
   }

   //Asigna la dirección (se usará para cambiar el sprite)
   direction = point_direction(0, 0, ejeX, ejeY);
   if (direction &lt;&gt; dirPrev) {//si direction ha cambiado
      tReposo = T_REPOSO; //iniciar temporizador
      dirPrev = direction; //actualizar direction previa
   }
   
   //Comienza a moverse cuando termina el tiempo de reposo
   if (tReposo &lt;= 0) {
      vx = lengthdir_x(v, direction);
      vy = lengthdir_y(v, direction);
   }
}

// Mouse
if mouse_check_button_pressed(mb_left) {//si se hace clic
   //obtener posicion final
   metaX = (mouse_x div 64)*64 + 32;
   metaY = (mouse_y div 64)*64 + 32;
   
   // Esta parte se puede modificar.
   // Primero se debe revisar si se hizo clic sobre un objeto salida
   // (que no es puerta), en ese caso, hacer una ruta más larga par salir de la room
   
   //si se encuentra una ruta, seguirla
   if mp_grid_path(grid, ptJugador, x, y, metaX, metaY, true) {
      path_start(ptJugador, v, path_action_stop, true);
      if instance_exists(obMarca) instance_destroy(obMarca);
      instance_create(metaX, metaY, obMarca);
      
      //si se hace clic sobre un objeto salida,
      //cambiar sprite de obMarca
      salida = instance_position(mouse_x, mouse_y, obSalida)
      if (salida &lt;&gt; noone) {
         obMarca.sprite_index = spMarcaSalida;
         obMarca.image_angle = salida.image_angle;
      }
   }
}

//Decrementar valor del timer tReposo
if (tReposo &gt; 0) tReposo--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destruir marca

if instance_exists(obMarca) {
   instance_destroy(obMarca);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Salir de la room o destruir marca 1

//Cuando el personaje llega al final de la path/ruta y está sobre un
// objeto salida, se genera otra ruta pequeña para salir de la room.
//Tal vez sea mejor hacer la ruta más larga desde el momento que se
// hace clic sobre un objeto salida.

//si se hizo clic en un objeto salida
//la variable salida tiene un valor diferente a noone
if (salida &lt;&gt; noone) {
   mp_grid_path(grid, ptJugador, x, y,
   x + lengthdir_x(64, salida.image_angle), 
   y + lengthdir_y(64, salida.image_angle), true);
   
   path_start(ptJugador, v, path_action_stop, true);
}
else if instance_exists(obMarca) {
   instance_destroy(obMarca);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Borrar estructuras dinámicas

mp_grid_destroy(grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depurar

draw_text(0, 0, direction);
draw_text(0, 24, path_index);
draw_text(0, 48, fps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depurar

//mp_grid_draw(grid);
draw_self();
draw_path(ptJugador, 0, 0, true);

if (npc &lt;&gt; noone)//draw_text(npc.x, npc.y, "HABLAR");
draw_sprite(spHablar, (current_time mod 600) &gt; 300, npc.x, npc.y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
