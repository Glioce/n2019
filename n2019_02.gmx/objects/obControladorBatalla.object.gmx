<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Info
/*************************************
Este es el controlador de batalla.
Sirve para inicializar variables del modo batalla.
Otras funciones no se han asignado.

Este objeto se crea cuando inicia el juego.
Muestra la introducción, define variables globales
y carga configuraciones
**************************************/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializar globales

draw_set_colour(c_white);

// jugador
// Variables para posicionar al jugador al cambiar de room
global.roomSig = rmPoniente; //en esta room inicia el juego
global.dirSig = 270; //dirección a la que mira el personaje
global.xSig = 800; //pos x
global.ySig = 800; //pos y

global.posSigDefinida = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Estados
// Las contantes de estados están definidas como macros
// (Resources --&gt; Define macros) ESTADO_*
// INTRO: Animación de piñata y Aldo. Mensaje abajo.
// SELATQ: Seleccionar ataque.
// SELZONA: Seleccionar zona donde se realiza el ataque.
// ANIMATQ: Animación de ataque.
// JUEGO: NO se usa. Podría agrupar los 3 estados anteriores
// GANA: Animación de destrucción de la piñata
// PIERDE: Animación cuando no se destruye la piñata
// DULCES: Minijuego opcional. Presionar rápido un botón para ganar dulces.

// Comenzar con la animación de intro
estado = ESTADO_INTRO;
/*
Aldo aparece por el lado izquierdo y la piñata por el lado derecho
pueden ser 2 objetos vacíos con los sprites correspondientes
Aquí se puede usar una función de interpolación
indicar posición inicial, pos final y duración

*/ 

// objeto dummy Aldo
x0Aldo = 100; //pos inicial de aldo
y0Aldo = 500;
x1Aldo = 200; //pos final de aldo
y1Aldo = 500;
tAldo = 60; //duración de aparición
aldo = instance_create(x0Aldo, y0Aldo, obDummy); //instancia vacía
//aldo.sprite_index = spAldoEspalda; //asignar sprite
aldo.image_alpha = 0; //inicia transparente/invisible

// objeto dummy piñata
x0Pina = 100; //pos inicial de aldo
y0Pina = 500;
x1Pina = 200; //pos final de aldo
y1Pina = 500;
tPina = 60; //duración de aparición
pina = instance_create(x0Pina, y0Pina, obDummy); //instancia vacía
pina.sprite_index = spPinata; //asignar sprite
pina.image_alpha = 0; //inicia transparente/invisible
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dibujar rejilla
// La room mide 1280 x 720
// La mitad es 640 y 360

draw_set_colour(c_white);
// lineas verticales en 640 +- 128
draw_line_width(640 - 128, 64, 640 - 128, 512, 2);
draw_line_width(640 + 128, 64, 640 + 128, 512, 2);
// linea horizontal
draw_line_width(224, 288, 1056, 288, 2);
// aros
draw_sprite(spAro, 0, 384, 160);
draw_sprite(spAro, 0, 640, 160);
draw_sprite(spAro, 0, 896, 160);
draw_sprite(spAro, 0, 384, 416);
draw_sprite(spAro, 0, 640, 416);
draw_sprite(spAro, 0, 896, 416);

draw_text(x, y, "Prueba de batalla");
//draw_text(x, y+24, "Presiona cualquier tecla para continuar");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
