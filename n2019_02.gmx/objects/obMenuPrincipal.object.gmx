<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spGrad00</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Info
/***********************

El juego tiene varios menús que se pueden basar en el mismo sistema.

Ideas para el menú principal.
Puede ser un solo objeto que dibuja y controla las acciones
o pueden ser varios objetos, uno para cada opción del menú
y tal vez un objeto controlador que se comunica con todos los objetos
para conocer su estado y organizar las acciones.

La complejidad incrementa porque los menús se pueden controlar con
teclado o con pantalla táctil (es más común que se use la pantalla táctil)

Cómo controlar con teclado
El menú inicia con una opción resaltada/seleccionada
(¿podría iniciar sin una opción resaltada?)
Cuando se presiona una tecla flecha se resalta otra opción.
Cuando se presiona el botón de acción se abre un sub-menú
que también tiene una opción resaltada. Al presionar acción
nuevamente, se selecciona la acción indicada y avanza a la pantalla/room
correspondiente.
Si se presiona el botón de cancelar/regresar (Esc) se cierra el sub-menú
y regresa a la opción seleccionada previamente.

Cómo controlar con pantalla táctil
El menú inicia con una opción resaltada. Si se toca esa opción,
se selecciona y se abre un sub-menú. Si se hace clic sobre la 
opción resaltada del sub-menú, se selecciona y avanaza.
Para cerrar el sub-menú, se debe hacer clic fuera del rectángulo
que contiene lo contiene.

Si se toca otra opción se resalta y se debe tocar otra vez para seleccionarla.
Lo mimo en los sub-menús.
¿Resultará incómodo para el jugador?
Se puede hacer que el resaltado y la selección se haga con un solo toque.

Las áreas que reaccionan a los toques pueden ser más fáciles de manejar si son
objetos independientes.

Si es un solo objeto Menu, los botones pueden ser scripts que dibujan un sprite
y un texto y detectan si se ha hecho clic sobre el área del sprite

[x] Instalar fuente Purisa
[x] Controlar con teclado
[x] Revisar otros proyectos con menús (SMLL y editor de planetas)
[] ¿llamar a los objetos UI?
[] Poner variables a botones idArriba, idAbajo

¿Cómo hacer los sub-menús?

Opción 1
Se crean otros botones que se controlan de forma similar al menú principal
El código para controlar los nuevos botones sería casi igual al que 
se usa en los primeros botones, solo se hace referencia a los nuevos botones.
Sería bueno reutilizar el código para los sub-menús.
Una forma de reutilizar el código es con scripts

Opción 2
Usar los mismos botones pero con texto diferente (y tal vez posición diferente).
Cuando es un sub-menú también se dibuja un rectángulo que contiene los botones.
¿Cómo se complicaría esta opción?

Código genérico para navegar el menú con teclado.
Cada botón puede tener los ids de los botones que están arriba y abajo (o a los lados)
Cuando se presiona una tecla, deja de resaltarse el botón y se resalta el botón con id correspondiente.
También puede tener una variable de activado para evitar que algunos botones respondan a enventos.
Todos los botones pueden estar creados desde el principio, solo se hacen visibles o invisibles y
se activan o se desactivan.

Ya se revisaron los proyectos SMLL y Editor de Planetas.
En los menús casi no se reutiliza código. Varias veces se escriben las mismas operaciones.
Se usan estados. El código correspondiente a cada estado se coloca en una acción "Execute Code".

Usaremos el último método propuesto que es diferente a los utilizados anterioremente.
Todos los bojetos se crean al principio (botones) y cada botón guarda el id del
botón adyacente o el siguiente que se resalta cuando se presiona una tecla.
El menú se ordenará diferente para mostrar el menú principal y uno de los sub-menús
al mismo tiempo.
Espero que sea intuitivo hacer clic fuera del rectángulo para cerrar el sub-menú.
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crear botones (v3) Menú Principal
// Los botones guardan el id del siguiente botón que se resalta cuando se presiona una tecla.

// Menú principal
btnJugar = instance_create(x, y, obBoton); //Jugar
btnCred = instance_create(x, y+96, obBoton); //Creditos
btnSalir = instance_create(x, y+96+96, obBoton); //Salir
//Tal vez  hace falta un botón para menú de ayuda

kolorActivo = make_color_rgb(128, 0, 128);
draw_set_font(fnPurisa);
draw_set_halign(fa_center);

kolorInactivo = make_color_rgb(100, 100, 100);

with (btnJugar) {//Jugar
    visible = true; //es visible
    activo = true; //está activo, puede detectar clics
    image_blend = other.kolorActivo; //asignar color
    resaltado = true; //inicia resaltado
    image_alpha = 1; //opacidad completa
    texto = "JUGAR"; //texto que dibuja
    image_xscale = 5; //hacer el botón alargado
    idArr = other.btnSalir; //id del botón que se resalta cuando se presiona arriba
    idAba = other.btnCred; //id del botón que se resalta cuando se presiona abajo
    depth = 2;
}
with (btnCred) {//Creditos
    visible = true; //es visible
    activo = true; //está activo, puede detectar clics
    image_blend = other.kolorActivo;
    resaltado = false; //no está resaltado
    image_alpha = 0.2; //es transparente
    texto = "CRÉDITOS";
    image_xscale = 5;
    idArr = other.btnJugar;
    idAba = other.btnSalir;
    depth = 2;
}
with (btnSalir) {//Salir
    visible = true; //es visible
    activo = true; //está activo, puede detectar clics
    image_blend = other.kolorActivo;
    resaltado = false;
    image_alpha = 0.2;
    texto = "SALIR";
    image_xscale = 5;
    idArr = other.btnCred;
    idAba = other.btnJugar;
    depth = 2;
}

btn = btnJugar; //Botón resaltado

//Estas variables tal vez ya no se usarán
index = 0; //elemento resaltado en el menú principal
subIndex = 0; //elemento resaltado en un sub-menu (salió interesante el nombre)

//estado indica el menú que se muestra
// 0 menú principal
// 1 sub-menu Jugar
// 2 sub-menu Creditos
// 3 sub-menu Salir
estado = 0;
estadoSig = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crear botones Sub-menú Jugar y Salir
// Los botones guardan el id del siguiente botón que
// se debe resaltar cuando se presiona una tecla.

// Sub-menú Jugar
btnPar1 = instance_create(x+256, y-32, obBoton); //Partida 1
btnPar2 = instance_create(x+256, y+64, obBoton); //Partida 2
btnPar3 = instance_create(x+256, y+64+96, obBoton); //Partida 3
// Solo funcionará el primer botón, es decir, solo se podrá elegir
// una partida. Los otros botones se activarán en actualizaciones
// posteriores, después de hacer muchas pruebas.

//draw_set_font(fnPurisa);
//draw_set_halign(fa_center);
//kolorActivo = make_color_rgb(128, 0, 128);
//kolorInactivo = make_color_rgb(100, 100, 100);

with (btnPar1) {//Partida 1
    visible = false; //es visible
    activo = false; //está inactivo, no puede detectar clics
    image_blend = other.kolorActivo; //asignar color
    resaltado = true; //inicia resaltado
    image_alpha = 1; //opacidad completa
    texto = "PARTIDA 1"; //texto que dibuja
    image_xscale = 5; //hacer el botón alargado
    idArr = noone; //id del botón que se resalta cuando se presiona arriba
    idAba = noone; //id del botón que se resalta cuando se presiona abajo    
}
with (btnPar2) {//Partida 2
    visible = false; //es visible
    activo = false; //está inactivo, no puede detectar clics
    image_blend = other.kolorInactivo;
    resaltado = false; //no está resaltado
    image_alpha = 0.2; //es transparente
    texto = "PARTIDA 2";
    image_xscale = 5;
    idArr = noone;
    idAba = noone;
}
with (btnPar3) {//Salir
    visible = false; //es visible
    activo = false; //está inactivo, no puede detectar clics
    image_blend = other.kolorInactivo;
    resaltado = false;
    image_alpha = 0.2;
    texto = "PARTIDA 3";
    image_xscale = 5;
    idArr = noone;
    idAba = noone;
}

// Sub-menú salir
btnOK = instance_create(x+256, y+64+96, obBoton); //OK Salir
with (btnOK) {
    visible = false; //es invisible
    activo = false; //está inactivo, no puede detectar clics
    image_blend = other.kolorActivo; //asignar color
    resaltado = true; //inicia resaltado
    image_alpha = 1; //opacidad completa
    texto = "OK"; //texto que dibuja
    image_xscale = 5; //hacer el botón alargado
    idArr = noone; //id del botón que se resalta cuando se presiona arriba
    idAba = noone; //id del botón que se resalta cuando se presiona abajo    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Globales pos

global.posSigDefinida = false;
global.xSig = 0; //posicionarse en el punto indicado
global.ySig = 0; //al salir de la room anterior
global.dirSig = 0;

draw_set_color(c_white);

//show_debug_message(vk_enter);
//show_debug_message(vk_return); //igual a vk_enter
//show_debug_message(vk_backspace);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crear botones 1

btnJugar = instance_create(x, y, obBoton);
btnCred  = instance_create(x, y+96, obBoton);
btnSalir = instance_create(x, y+96+96, obBoton);

kolor = make_colour_rgb(128, 0, 128);
draw_set_font(fnPurisa);
draw_set_halign(fa_center);

with (btnJugar) {
    image_blend = other.kolor;
    resaltado = true;
    image_alpha = 1;
    texto = "JUGAR";
    image_xscale = 5;
}
with (btnCred) {
    image_blend = other.kolor;
    resaltado = false;
    image_alpha = 0.2;
    texto = "CRÉDITOS";
    image_xscale = 5;
}
with (btnSalir) {
    image_blend = other.kolor;
    resaltado = false;
    image_alpha = 0.2;
    texto = "SALIR";
    image_xscale = 5;
}

index = 0; //elemento resaltado en el menú principal
subIndex = 0; //elemento resaltado en un sub-menu (salió interesante el nombre)

//estado indica el menú que se muestra
// 0 menú principal
// 1 sub-menu Jugar
// 2 sub-menu Creditos
// 3 sub-menu Salir
estado = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crear botones 2
// Los botones guardan el id del siguiente botón que se resalta cuando se presiona una tecla.

btn[0] = instance_create(x, y, obBoton); //Jugar
btn[1] = instance_create(x, y+96, obBoton); //Creditos
btn[2] = instance_create(x, y+96+96, obBoton); //Salir
//Tal vez  hace falta un botón para menú de ayuda

kolor = make_colour_rgb(128, 0, 128);
draw_set_font(fnPurisa);
draw_set_halign(fa_center);

with (btn[0]) {//Jugar
    image_blend = other.kolor; //asignar color
    resaltado = true; //inicia resaltado
    image_alpha = 1; //opacidad completa
    texto = "JUGAR"; //texto que dibuja
    image_xscale = 5; //hacer el botón alargado
    idArr = btn[2]; //id del botón que se resalta cuando se presiona arriba
    idAba = btn[1]; //id del botón que se resalta cuando se presiona abajo
    visible = true; //es visible
    activo = true; //está activo, puede detectar clics
}
with (btn[1]) {//Creditos
    image_blend = other.kolor;
    resaltado = false; //no está resaltado
    image_alpha = 0.2; //es transparente
    texto = "CRÉDITOS";
    image_xscale = 5;
    idArr = btn[0];
    idAba = btn[2];
}
with (btn[2]) {//Salir
    image_blend = other.kolor;
    resaltado = false;
    image_alpha = 0.2;
    texto = "SALIR";
    image_xscale = 5;
    idArr = btn[1];
    idAba = btn[0];
}

//Estas variables tal vez ya no se usarán
index = 0; //elemento resaltado en el menú principal
subIndex = 0; //elemento resaltado en un sub-menu (salió interesante el nombre)

//estado indica el menú que se muestra
// 0 menú principal
// 1 sub-menu Jugar
// 2 sub-menu Creditos
// 3 sub-menu Salir
estado = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlar menú Principal (estado 0)

// Con teclado
// der = keyboard_check(vk_right) or keyboard_check(ord('D'));
// izq = keyboard_check(vk_left) or keyboard_check(ord('A'));
arr = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W'));
aba = keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S'));
sel =  keyboard_check_pressed(vk_enter)
    or keyboard_check_pressed(ord('X'))
    or keyboard_check_pressed(ord('J'));
//escape, cancelar
esc = keyboard_check_pressed(vk_escape) or keyboard_check_pressed(vk_backspace);
    
if (estado == 0) {// Menú principal
    if (arr or aba) {// si se presiona arriba o abajo
        audio_play_sound(snBeepTimber, 1, false); //sonido
        btn.resaltado = false; //desmarcar el botón actual
        if (arr) btn = btn.idArr;
        if (aba) btn = btn.idAba;
        btn.resaltado = true; //nuevo botón resaltado
    }
    if(sel) {// si se presiona seleccionar
        audio_play_sound(snBeepHightone, 1, false);
        //abrir sub-menu
        if (btnJugar.resaltado) estadoSig = 1;
        if (btnCred.resaltado) estadoSig = 2;
        if (btnSalir.resaltado) estadoSig = 3;
    }
    
    // Con mouse (pantalla táctil)
    if (btnJugar.klic) {
        if(btnJugar.resaltado) {//abrir menú partidas
            audio_play_sound(snBeepHightone, 1, false);
            estadoSig = 1;
        }
        else {
            audio_play_sound(snBeepTimber, 1, false);
            btn.resaltado = false; //el actual está resaltado
            btnJugar.resaltado = true;
            btn = btnJugar;
        }
    }
    if (btnCred.klic) {
        if(btnCred.resaltado) {//abrir ventana de créditos
            audio_play_sound(snBeepHightone, 1, false);
            estadoSig = 2;
        }
        else {
            audio_play_sound(snBeepTimber, 1, false);
            btn.resaltado = false;
            btnCred.resaltado = true;
            btn = btnCred;
        }
    }
    if (btnSalir.klic) {
        if(btnSalir.resaltado) {//salir del juego
            audio_play_sound(snBeepHightone, 1, false);
            estadoSig = 3;
        }
        else {
            audio_play_sound(snBeepTimber, 1, false);
            btn.resaltado = false;
            btnSalir.resaltado = true;
            btn = btnSalir;
        }
    }
    
    // Hacer visible sub-menú Jugar (para seleccionar partida)
    if (estadoSig == 1) {
        //se desactivan los botones del menú principal
        btnJugar.activo = false;
        btnCred.activo = false;
        btnSalir.activo = false;
        btnJugar.image_blend = kolorInactivo;
        btnCred.image_blend = kolorInactivo;
        btnSalir.image_blend = kolorInactivo;
        
        //se hacen visibles los botones para seleccionar partidas
        btnPar1.visible = true;
        btnPar2.visible = true;
        btnPar3.visible = true;
        btnPar1.activo = true;
        btn = btnPar1; //botón seleccionado
    }
    // Mostrar créditos
    if (estadoSig == 2) {
        //se desactivan los botones del menú principal
        btnJugar.activo = false;
        btnCred.activo = false;
        btnSalir.activo = false;
        btnJugar.image_blend = kolorInactivo;
        btnCred.image_blend = kolorInactivo;
        btnSalir.image_blend = kolorInactivo;
    }
    // Hacer visible sub-menú Salir (aceptar salir)
    if (estadoSig == 3) {
        //se desactivan los botones del menú principal
        btnJugar.activo = false;
        btnCred.activo = false;
        btnSalir.activo = false;
        btnJugar.image_blend = kolorInactivo;
        btnCred.image_blend = kolorInactivo;
        btnSalir.image_blend = kolorInactivo;
        
        btnOK.visible = true;
        btnOK.activo = true;
        //btn = btnPar1; //botón seleccionado
    }
}//fin estado 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlar Menú Jugar - seleccionar partida (estado 1)

// Con teclado
// der = keyboard_check(vk_right) or keyboard_check(ord('D'));
// izq = keyboard_check(vk_left) or keyboard_check(ord('A'));
//arr = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W'));
//aba = keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S'));
//sel =  keyboard_check_pressed(vk_enter)
//    or keyboard_check_pressed(ord('X'))
//    or keyboard_check_pressed(ord('J'));
    
if (estado == 1) {// Menú principal
    if (arr or aba) {// si se presiona arriba o abajo
        audio_play_sound(snBeepTimber, 1, false); //sonido
        //btn.resaltado = false; //desmarcar el botón actual
        //if (arr) btn = btn.idArr;
        //if (aba) btn = btn.idAba;
        //btn.resaltado = true; //nuevo botón resaltado
    }
    if(sel) {// si se presiona seleccionar
        audio_play_sound(snBeepHightone, 1, false);
        //iniciar juego
        //if (btnJugar.resaltado) estadoSig = 1;
        estadoSig = 4;
    }
    if (esc) {//si se presiona cancelar
        //volver al manú principal
        audio_play_sound(snBeepTimber, 1, false);
        estadoSig = 0;
    }
    
    
    // Con mouse (pantalla táctil)
    if (btnPar1.klic) {
        if(btnPar1.resaltado) {//abrir menú partidas
            audio_play_sound(snBeepHightone, 1, false);
            estadoSig = 4;
        }
        else {
            audio_play_sound(snBeepTimber, 1, false);
            btn.resaltado = false;
            btnPar1.resaltado = true;
            btn = btnPar1;
        }
    }
    if mouse_check_button_pressed(mb_left) {
        if not point_in_rectangle(mouse_x, mouse_y, 576, 320, 960, 640) {
            audio_play_sound(snBeepTimber, 1, false);
            estadoSig = 0;
        }
    }
        
    // Iniciar juego
    if (estadoSig == 4) {
        room_goto(rmPoniente);
    }
    // Regresar al manú principal
    if (estadoSig == 0) {
        btnPar1.activo = false;
        btnPar1.visible = false;
        btnPar2.visible = false;
        btnPar3.visible = false;
        
        btnJugar.activo = true;
        btnCred.activo = true;
        btnSalir.activo = true;
        btnJugar.image_blend = kolorActivo;
        btnCred.image_blend = kolorActivo;
        btnSalir.image_blend = kolorActivo;
        btn = btnJugar;
    }
}//fin estado 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ventana de créditos (estado 2)

if (estado == 2) {// Créditos
    if (arr or aba) {// si se presiona arriba o abajo
        //audio_play_sound(snBeepTimber, 1, false); //sonido
        //btn.resaltado = false; //desmarcar el botón actual
        //if (arr) btn = btn.idArr;
        //if (aba) btn = btn.idAba;
        //btn.resaltado = true; //nuevo botón resaltado
    }
    if(sel) {// si se presiona seleccionar
        //audio_play_sound(snBeepHightone, 1, false);
        //iniciar juego
        //if (btnJugar.resaltado) estadoSig = 1;
        //estadoSig = 4;
    }
    if (esc) {//si se presiona cancelar
        //volver al manú principal
        audio_play_sound(snBeepTimber, 1, false);
        estadoSig = 0;
    }
    
    
    // Con mouse (pantalla táctil)
    if mouse_check_button_pressed(mb_left) {
        if not point_in_rectangle(mouse_x, mouse_y, 576, 320, 960, 640) {
            audio_play_sound(snBeepTimber, 1, false);
            estadoSig = 0;
        }
    }
        
    // Regresar al manú principal
    if (estadoSig == 0) {
        btnJugar.activo = true;
        btnCred.activo = true;
        btnSalir.activo = true;
        btnJugar.image_blend = kolorActivo;
        btnCred.image_blend = kolorActivo;
        btnSalir.image_blend = kolorActivo;
        btn = btnCred;
    }
}//fin estado 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Aceptar salir (estado 3)

if (estado == 3) {// Salir
    if (arr or aba) {// si se presiona arriba o abajo
        //audio_play_sound(snBeepTimber, 1, false); //sonido
        //btn.resaltado = false; //desmarcar el botón actual
        //if (arr) btn = btn.idArr;
        //if (aba) btn = btn.idAba;
        //btn.resaltado = true; //nuevo botón resaltado
    }
    if(sel) {// si se presiona seleccionar
        audio_play_sound(snBeepHightone, 1, false);
        estadoSig = 5; //salir
    }
    if (esc) {//si se presiona cancelar
        audio_play_sound(snBeepTimber, 1, false);
        estadoSig = 0; //volver al manú principal
    }
    
    
    // Con mouse (pantalla táctil)
    if (btnOK.klic) {
        if(btnOK.resaltado) {//salir
            audio_play_sound(snBeepHightone, 1, false);
            estadoSig = 5;
        }
        else {
            //audio_play_sound(snBeepTimber, 1, false);
            //btn.resaltado = false;
            //btnPar1.resaltado = true;
            //btn = btnPar1;
        }
    }
    if mouse_check_button_pressed(mb_left) {
        if not point_in_rectangle(mouse_x, mouse_y, 576, 512, 960, 640) {
            audio_play_sound(snBeepTimber, 1, false);
            estadoSig = 0;
        }
    }
        
    // Salir
    if (estadoSig == 5) {
        game_end();
    }
    // Regresar al manú principal
    if (estadoSig == 0) {
        btnOK.activo = false;
        btnOK.visible = false;
                
        btnJugar.activo = true;
        btnCred.activo = true;
        btnSalir.activo = true;
        btnJugar.image_blend = kolorActivo;
        btnCred.image_blend = kolorActivo;
        btnSalir.image_blend = kolorActivo;
        btn = btnSalir;
    }
}//fin estado 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Estado siguiente
estado = estadoSig;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controlar menú 1

// con teclado
//der = keyboard_check(vk_right) or keyboard_check(ord('D'));
//izq = keyboard_check(vk_left) or keyboard_check(ord('A'));
arr = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W'));
aba = keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S'));
sel =  keyboard_check_pressed(vk_enter)
    or keyboard_check_pressed(ord('X'))
    or keyboard_check_pressed(ord('J'));
    
if (estado == 0) {// Menú principal
    if (arr or aba) {// si se presiona arriba o abajo
        audio_play_sound(snBeepTimber, 1, false); //sonido
        btnJugar.resaltado = false; //desmarcar todo
        btnCred.resaltado = false;
        btnSalir.resaltado = false;
        
        //cambiar index
        if (arr) index--;
        if (index &lt; 0) index = 2;
        if (aba) index++;
        if (index &gt; 2) index = 0;
        
        //resaltar botón
        switch (index) {
            case 0: btnJugar.resaltado = true; break;
            case 1: btnCred.resaltado = true; break;
            case 2: btnSalir.resaltado = true; break;
        }
    }
    if(sel) {// si se presiona seleccionar
        //abrir sub-menu
        switch (index) {
            case 0: audio_play_sound(snBeepHightone, 1, false); break;
            case 1: audio_play_sound(snBeepHightone, 1, false); break;
            case 2: audio_play_sound(snBeepHightone, 1, false); break;
        }
    }
}

// Con mouse (pantalla táctil)
if (btnJugar.klic) {
    index = 0;
    if(btnJugar.resaltado) {
        //abrir menú partidas
        audio_play_sound(snBeepHightone, 1, false);
        
    }
    else {
        btnJugar.resaltado = true;
        btnCred.resaltado = false;
        btnSalir.resaltado = false;
        audio_play_sound(snBeepTimber, 1, false);
    }
}
if (btnCred.klic) {
    index = 1;
    if(btnCred.resaltado) {
        //abrir ventana de créditos
        audio_play_sound(snBeepHightone, 1, false);
    }
    else {
        btnJugar.resaltado = false;
        btnCred.resaltado = true;
        btnSalir.resaltado = false;
        audio_play_sound(snBeepTimber, 1, false);
    }
}
if (btnSalir.klic) {
    index = 2;
    if(btnSalir.resaltado) {
        //salir del juego
        audio_play_sound(snBeepHightone, 1, false);
    }
    else {
        btnJugar.resaltado = false;
        btnCred.resaltado = false;
        btnSalir.resaltado = true;
        audio_play_sound(snBeepTimber, 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dibujar rectángulo

if (estado == 1) {//Jugar
    draw_slice9_color(576, 320, 384, 320, spRec2, 0, 8,24, 8,24, c_yellow);
}
if (estado == 2) {//Créditos
    draw_slice9_color(576, 320, 384, 320, spRec2, 0, 8,24, 8,24, c_yellow);
    draw_text(768, 350, "Texto");
}
if (estado == 3) {//Salir
    draw_slice9_color(576, 512, 384, 128, spRec2, 0, 8,24, 8,24, c_yellow);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
